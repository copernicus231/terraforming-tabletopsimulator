#include ../CORE/Board
#include ../CORE/SmallestMatrix
loadingGame = true

venusTileButton={button = {
click_function = 'venusTileClick', function_owner = self, label = "",
    position = {0,0.1,0},rotation={0,0,0},width = 300, height = 300, font_size = 100,font_color={0,0,0,0},color=Color.fromString("Red"),hover_color={0,0,0,0},tooltip="Place"
},getCurrentColor=function() return "Red" end,getNextColor= function() return "Blue" end}

cityTileButton={button = {
click_function = 'cityTileClick', function_owner = self, label = "",
    position = {0,0.1,0},rotation={0,0,0},width = 300, height = 300, font_size = 100,font_color={0,0,0,0},color=Color.fromString("Red"),hover_color={0,0,0,0},tooltip="Place"
},getCurrentColor=function() return "Red" end,getNextColor= function() return "Blue" end}

venusZone={matrix=matrixMap,parent=self,zoneTag=nil}


function venusTileClick(obj,player_clicker_color,alt_click)
    venusTileButton:doClick(obj,player_clicker_color,alt_click,placeVenusTile)
end

function cityTileClick(obj,player_clicker_color,alt_click)
    cityTileButton:doClick(obj,player_clicker_color,alt_click,placeCityTile)
end


function initMap()
    for i = 1,16 do
        matrixMap[i].snap = i
    end
    matrixMap[17].snap = 37
    for i=17,34 do
      matrixMap[i+1].snap = i
    end
    matrixMap[1].bonus = {He=2}
    matrixMap[3].bonus = {En=1}
    matrixMap[6].bonus = {En=1}
    matrixMap[7].bonus = {He=1}
    matrixMap[8].bonus = {He=3}
    matrixMap[9].bonus = {En=1}

    matrixMap[10].bonus = {Card=2}
    matrixMap[11].bonus = {He=2}
    matrixMap[13].bonus = {En=1}
    matrixMap[14].bonus = {He=1}
    matrixMap[15].bonus = {MC=5}

    matrixMap[16].bonus = {He=1}
    matrixMap[19].bonus = {En=1}

    matrixMap[21].bonus = {En=2}
    matrixMap[22].bonus = {En=1}
    matrixMap[23].bonus = {He=2}
    matrixMap[24].bonus = {En=1}
    matrixMap[26].bonus = {He=2}

    matrixMap[28].bonus = {He=1}
    matrixMap[29].bonus = {He=1}
    matrixMap[30].bonus = {En=1}
    matrixMap[31].bonus = {He=2}

    matrixMap[32].bonus = {En=1,Card=1}
    matrixMap[33].bonus = {He=1}
    matrixMap[35].bonus = {Card=2}
end

function onLoad(save_state)
    TileButton:new(venusTileButton)
    TileButton:new(cityTileButton)
    initMap()
    TileBoard:new(venusZone)
    initZone()
    loadingGame = false
end

function initZone()
    local objs = getObjectsWithAllTags({"VenusTile"})
    for i,a in ipairs(objs) do
        if a.getLock() then
            local pos = venusZone:getZonePosition(a)
            if pos != 0 then
                venusZone:placeTile(a,pos)
            end
        end
    end
end
function extraBonus(obj)
    return {}
end
function placeTile(obj,color)
    local position = venusZone:getZonePosition(obj)
    if position > 0 then
        obj.memo=color
        venusZone:placeTile(obj,position)
        if color != "Grey" then
            local bonus = venusZone:getPlacementBonusColor(position)
            for i,a in pairs(extraBonus(obj)) do
                bonus[color][i] = (bonus[color][i] or 0) + a
            end
            applyBonusC(bonus)
            --applyBonus(bonus,color)
        end
        return true
    end
    return false
end
function placeCityTile(obj,color)
  if placeTile(obj,color) then
      if color != "Grey" then
          broadcastToAll("<VENUS>[==> "..getPlayerName(color).." place "..obj.getName().. " ]", Color.fromString(color))
      end
  end
end
function placeVenusTile(obj,color)
    if placeTile(obj,color) then
        if color != "Grey" then
            --tracks.tr:moveTrack(color,1)
            getBoard("VenusNext").call("moveTrack",{step=1,color=color,name="venusScale"})
            broadcastToAll("<VENUS>[==> "..getPlayerName(color).." place "..obj.getName().. " ]", Color.fromString(color))
        end
    end
end

function onCollisionExit(collision_info)
    if loadingGame then
        return
    end
    local obj = collision_info.collision_object
    --WORK AROUND WITH LOCK OBJECTS TRIGGER AN onCollisionExit
    if obj.getLock() then
        return
    end
    if obj.hasTag("VenusTile") then
        venusTileButton:remove(obj)
    elseif obj.hasTag("City") then
        cityTileButton:remove(obj)
    end
end

function onCollisionEnter(collision_info)
        if loadingGame then
            return
        end
        local obj = collision_info.collision_object
        --WORK AROUND WITH LOCK OBJECTS TRIGGER AN onCollisionExit
        if obj.getLock() then
            return
        end
        if obj.hasTag("VenusTile") then
            venusTileButton:add(obj)
        elseif obj.hasTag("City") then
            cityTileButton:add(obj)
        end
end
